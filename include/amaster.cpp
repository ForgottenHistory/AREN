#include <amaster.h>
#include <aobject.h>
#include <amanager.h>
#include <render/arenderer.h>
#include <time.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

AMaster::AMaster()
{
    renderer = new ARenderer();
    objectManager = new AObjectManager();



    //ACube* cube = objectManager->CreateCube();
}

AMaster::~AMaster()
{
    glfwTerminate();
    delete renderer;
    delete objectManager;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AMaster::MainLoop()
{
    while (!glfwWindowShouldClose(renderer->window))
    {
        Update();
        Render();
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AMaster::PreStart()
{
    objectManager->PreStart();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AMaster::Start()
{
    objectManager->Start();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AMaster::Update()
{
    Time::UpdateTime();
    objectManager->Update();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AMaster::SecondUpdate()
{
    objectManager->SecondUpdate();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AMaster::Render()
{   
    objectManager->Render();
    renderer->Render();

    float elapsedTime = Time::elapsedTime;

    if (elapsedTime >= printTime)
    {
        Time::PrintTime();
        printTime = elapsedTime + 0.5f;
    }

    // Swap the front and back buffers
    glfwSwapBuffers(renderer->window);

    // Poll for and process events
    glfwPollEvents();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
